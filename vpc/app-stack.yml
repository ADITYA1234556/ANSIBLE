---
- name: Setup app stack with RDS, MEMECACHE, RABBITMQ AS BACKEND,NGINX AS ELB AND TOMCAT AS WEBSERVER RUNNING BEHIND ELB
  hosts: localhost
  connection: local
  gather_facts: no
  tasks:
    - name: Import VPC setup variables ids
      include_vars: variables/output_ids

    - name: Import VPC setup variables ids
      include_vars: variables/app-stack-vars

    - name: Create a key-pair
      amazon.aws.ec2_key:
        name: ansible-key
        region: "{{region}}"
      register: keypair
      no_log: true

    - debug:
        var: keypair

    - name: Save private key into a file
      copy:
        content: "{{keypair.key.private_key}}"
        dest: "./ansible-key.pem"
        mode: 0600
      when: keypair.changed

    - name: Create Security group for Load Balancer
      amazon.aws.ec2_security_group:
        name: ansible-loadbalancer-sg
        description: allow incoming traffic on port 80 and 443 from anywhere
        region: "{{region}}"
        vpc_id: "{{vpcid}}"
        rules:
          - proto: tcp
            from_port: 80
            to_port: 80
            cidr_ip: "{{allowed_connection}}"
          - proto: tcp
            from_port: 443
            to_port: 443
            cidr_ip: "{{allowed_connection}}"
      register: loadbalancer

    - debug:
        var: loadbalancer

    - debug:
        var: bastionid

    - name: Create Security group for app stack
      amazon.aws.ec2_security_group:
        name: ansible-tomcat-sg
        description: allow incoming traffic on port 22 from bastion host and port 80 from load balancer
        region: "{{region}}"
        vpc_id: "{{vpcid}}"
        purge_rules: false #will not recreate security group unless there are any security group rule changes
        rules:
          - proto: tcp
            from_port: 22
            to_port: 22
            group_id: "{{bastionid}}"
          - proto: tcp
            from_port: 80
            to_port: 80
            group_id: "{{loadbalancer.group_id}}"
      register: appstacksg

    - debug:
        var: appstacksg

    - name: Update ansible-tomcat-sg
      amazon.aws.ec2_security_group:
        name: ansible-tomcat-sg
        description: allow all internal traffic
        region: "{{region}}"
        vpc_id: "{{vpcid}}"
        purge_rules: false #will not recreate security group unless there are any security group rule changes
        rules:
          - proto: all
            group_id: "{{appstacksg.group_id}}"

    - name: Create EC2 only if not created nginx
      amazon.aws.ec2_instance_info:
        filters:
          "tag:Name": nginx
          instance-state-name: [ "running" ]
        region: "{{region}}"
      register: checknginxhost

    - name: Creating EC2 host for nginx
      amazon.aws.ec2_instance:
        name: "nginx"
        region: "{{region}}"
        instance_type: t2.micro
        vpc_subnet_id: "{{pvtsub1id}}"
        key_name: ansible-key
        image_id: "{{nginx_ami}}"
        wait: true
        wait_timeout: 300
        security_group: "{{appstacksg.group_id}}"
        tags:
          Name: nginx
        exact_count: 1
      register: nginxhost
      when: checknginxhost.instances | length == 0

    - name: Gather EC2 instance info for nginx
      amazon.aws.ec2_instance_info:
        region: "{{ region }}"
        filters:
          "tag:Name": "nginx"
      register: nginx_instance_info

#    - name: Print nginxhost Private IP
#      debug:
#        msg: "nginxhost Private IP is {{ nginx_instance_info.instances[0].private_ip_address }}"
#      when: nginxhost is defined

    - name: Create EC2 only if not created tomcat
      amazon.aws.ec2_instance_info:
        filters:
          "tag:Name": tomcat
          instance-state-name: [ "running" ]
        region: "{{region}}"
      register: checktomcathost

    - name: Creating EC2 host for tomcat
      amazon.aws.ec2_instance:
        name: "tomcat"
        region: "{{region}}"
        instance_type: t2.micro
        vpc_subnet_id: "{{pvtsub1id}}"
        key_name: ansible-key
        image_id: "{{tomcat_ami}}"
        wait: true
        wait_timeout: 300
        security_group: "{{appstacksg.group_id}}"
        tags:
          Name: tomcat
        exact_count: 1
      register: tomcathost
      when: checktomcathost.instances | length == 0

    - name: Gather EC2 instance info for tomcat
      amazon.aws.ec2_instance_info:
        region: "{{ region }}"
        filters:
          "tag:Name": "tomcat"
      register: tomcat_instance_info

    - name: Debug tomcat_instance_info output
      debug:
        var: tomcat_instance_info

#    - name: Print tomcathost Private IP
#      debug:
#        msg: "tomcat private ip is {{ tomcat_instance_info.instances[0].private_ip_address }} "
#      when: tomcat_instance_info.instances is defined

    - name: Create EC2 only if not created memcache
      amazon.aws.ec2_instance_info:
        filters:
          "tag:Name": memcache
          instance-state-name: [ "running" ]
        region: "{{region}}"
      register: checkmemcachehost

    - name: Creating EC2 host for memcache
      amazon.aws.ec2_instance:
        name: "memcache"
        region: "{{region}}"
        instance_type: t2.micro
        vpc_subnet_id: "{{pvtsub1id}}"
        key_name: ansible-key
        image_id: "{{memcache_ami}}"
        wait: true
        wait_timeout: 300
        security_group: "{{appstacksg.group_id}}"
        tags:
          Name: memcache
        exact_count: 1
      register: memcachehost
      when: checkmemcachehost.instances | length == 0

    - name: Gather EC2 instance info for memcache
      amazon.aws.ec2_instance_info:
        region: "{{ region }}"
        filters:
          "tag:Name": "memcache"
      register: memcache_instance_info

    - name: Debug memcache_instance_info output
      debug:
        var: memcache_instance_info

#    - name: Print memcachehost Private IP
#      debug:
#        msg: "memcachehost Private IP is {{ memcache_instance_info.instances[0].private_ip_address }}"
#      when: memcachehost is defined

    - name: Create EC2 only if not created rabbitmq
      amazon.aws.ec2_instance_info:
        filters:
          "tag:Name": rabbitmq
          instance-state-name: [ "running" ]
        region: "{{region}}"
      register: checkrabbitmqhost

    - name: Creating EC2 host for rabbitmq
      amazon.aws.ec2_instance:
        name: "rabbitmq"
        region: "{{region}}"
        instance_type: t2.micro
        vpc_subnet_id: "{{pvtsub1id}}"
        key_name: ansible-key
        image_id: "{{rmq_ami}}"
        wait: true
        wait_timeout: 300
        security_group: "{{appstacksg.group_id}}"
        tags:
          Name: rabbitmq
        exact_count: 1
      register: rabbitmqhost
      when: checkrabbitmqhost.instances | length == 0

    - name: Gather EC2 instance info for rabbitmq
      amazon.aws.ec2_instance_info:
        region: "{{ region }}"
        filters:
          "tag:Name": "rabbitmq"
      register: rabbitmq_instance_info

    - name: Debug rabbitmq_instance_info output
      debug:
        var: rabbitmq_instance_info

#    - name: Print rabbitmq Private IP
#      debug:
#        msg: "MySQL Private IP is {{ rabbitmq_instance_info.instances[0].private_ip_address }}"
#      when: rabbitmq is defined

    - name: Create EC2 only if not created mysql
      amazon.aws.ec2_instance_info:
        filters:
          "tag:Name": mysql
          instance-state-name: [ "running" ]
        region: "{{region}}"
      register: checkmysqlhost

    - name: Creating EC2 host for mysql
      amazon.aws.ec2_instance:
        name: "mysql"
        region: "{{region}}"
        instance_type: t2.micro
        vpc_subnet_id: "{{pvtsub1id}}"
        key_name: ansible-key
        image_id: "{{mysql_ami}}"
        wait: true
        wait_timeout: 300
        security_group: "{{appstacksg.group_id}}"
        tags:
          Name: mysql
        exact_count: 1
      register: mysqlhost
      when: checkmysqlhost.instances | length == 0

    - name: Gather EC2 instance info for MySQL
      amazon.aws.ec2_instance_info:
        region: "{{ region }}"
        filters:
          "tag:Name": "mysql"
      register: mysql_instance_info

    - name: Debug mysql_instance_info output
      debug:
        var: mysql_instance_info

    - set_fact:
        nginxip: "{{ nginx_instance_info.instances[0].private_ip_address }}"
        tomcatip: "{{ tomcat_instance_info.instances[0].private_ip_address }}"
        memcacheip: "{{ memcache_instance_info.instances[0].private_ip_address }}"
        rabbitmqip: "{{ rabbitmq_instance_info.instances[0].private_ip_address }}"
        mysqlip: "{{ mysql_instance_info.instances[0].private_ip_address }}"

#    - name: Print MySQL Private IP
#      debug:
#        msg: "MySQL Private IP is {{ mysql_instance_info.instances[0].private_ip_address }}"
#      when: mysqlhost is defined

    - name: Insert private IP address in a file stack/group_vars/hostip
      blockinfile:
        path: stack/group_vars/hostip
        block: |
          nginx_ip:  {{ nginx_instance_info.instances[0].private_ip_address }}
          tomca_ip: {{ tomcat_instance_info.instances[0].private_ip_address }}
          memcache_ip: {{ memcache_instance_info.instances[0].private_ip_address }}
          rabbitmq_ip: {{ rabbitmq_instance_info.instances[0].private_ip_address }}
          mysql_ip: {{ mysql_instance_info.instances[0].private_ip_address }}

    - name: Copy login key to stack directory
      copy:
        src: ansible-key.pem
        dest: stack/ansible-stack.pem
        mode: 0400

    - name: Create a loadbalancer
      local_action:
        module: ec2_elb_lb
        name: "app-elb"
        region: "{{region}}"
        state: "{{state}}"
        instance_ids:
          - "{{ nginx_instance_info.instances[0].instance_id }}"
        purge_instance_ids: true #will remove any instances that are added to elb but not specified here in code
        security_group_ids: "{{loadbalancer.group_id}}"
        subnets:
          - "{{pubsub1id}}"
          - "{{pubsub2id}}"
          - "{{pubsub3id}}"
        listeners:
          - protocol: http
            load_balancer_port: 80
            instance_port: 80

