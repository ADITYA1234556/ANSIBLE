---
- name: Setup app stack with RDS, MEMECACHE, RABBITMQ AS BACKEND,NGINX AS ELB AND TOMCAT AS WEBSERVER RUNNING BEHIND ELB
  hosts: localhost
  connection: local
  gather_facts: no
  tasks:
    - name: Import VPC setup variables ids
      include_vars: variables/output_ids

    - name: Import VPC setup variables ids
      include_vars: variables/app-stack-vars

    - name: Create a key-pair
      amazon.aws.ec2_key:
        name: ansible-key
        region: "{{region}}"
      register: keypair
      no_log: true

    - debug:
        var: keypair

    - name: Save private key into a file
      copy:
        content: "{{keypair.key.private_key}}"
        dest: "./ansible-key.pem"
        mode: 0600
      when: keypair.changed

    - name: Create Security group for Load Balancer
      amazon.aws.ec2_security_group:
        name: ansible-loadbalancer-sg
        description: allow incoming traffic on port 80 and 443 from anywhere
        region: "{{region}}"
        vpc_id: "{{vpcid}}"
        rules:
          - proto: tcp
            from_port: 80
            to_port: 80
            cidr_ip: "{{allowed_connection}}"
          - proto: tcp
            from_port: 443
            to_port: 443
            cidr_ip: "{{allowed_connection}}"
      register: loadbalancer

    - debug:
        var: loadbalancer

    - debug:
        var: bastionid

    - name: Create Security group for app stack
      amazon.aws.ec2_security_group:
        name: ansible-tomcat-sg
        description: allow incoming traffic on port 22 from bastion host and port 80 from load balancer
        region: "{{region}}"
        vpc_id: "{{vpcid}}"
        purge_rules: false #will not recreate security group unless there are any security group rule changes
        rules:
          - proto: tcp
            from_port: 22
            to_port: 22
            group_id: "{{bastionid}}"
          - proto: tcp
            from_port: 80
            to_port: 80
            group_id: "{{loadbalancer.group_id}}"
      register: appstacksg

    - debug:
        var: appstacksg

    - name: Update ansible-tomcat-sg
      amazon.aws.ec2_security_group:
        name: ansible-tomcat-sg
        description: allow all internal traffic
        region: "{{region}}"
        vpc_id: "{{vpcid}}"
        purge_rules: false #will not recreate security group unless there are any security group rule changes
        rules:
          - proto: all
            group_id: "{{appstacksg.group_id}}"

    - name: Create EC2 only if not created nginx
      amazon.aws.ec2_instance_info:
        filters:
          "tag:Name": nginx
          instance-state-name: [ "running" ]
        region: "{{region}}"
      register: checknginxhost

    - name: Creating EC2 host for nginx
      amazon.aws.ec2_instance:
        name: "nginx"
        region: "{{region}}"
        instance_type: t2.micro
        vpc_subnet_id: "{{pvtsub1id}}"
        key_name: ansible-key
        image_id: "{{nginx_ami}}"
        wait: true
        wait_timeout: 300
        security_group: "{{appstacksg.group_id}}"
        tags:
          Name: nginx
        exact_count: 1
      register: nginxhost
      when: checknginxhost.instances | length == 0

    - name: Create EC2 only if not created tomcat
      amazon.aws.ec2_instance_info:
        filters:
          "tag:Name": tomcat
          instance-state-name: [ "running" ]
        region: "{{region}}"
      register: checktomcathost

    - name: Creating EC2 host for tomcat
      amazon.aws.ec2_instance:
        name: "tomcat"
        region: "{{region}}"
        instance_type: t2.micro
        vpc_subnet_id: "{{pvtsub1id}}"
        key_name: ansible-key
        image_id: "{{tomcat_ami}}"
        wait: true
        wait_timeout: 300
        security_group: "{{appstacksg.group_id}}"
        tags:
          Name: tomcat
        exact_count: 1
      register: tomcathost
      when: checktomcathost.instances | length == 0

    - name: Create EC2 only if not created memcache
      amazon.aws.ec2_instance_info:
        filters:
          "tag:Name": memcache
          instance-state-name: [ "running" ]
        region: "{{region}}"
      register: checkmemcachehost

    - name: Creating EC2 host for memcache
      amazon.aws.ec2_instance:
        name: "memcache"
        region: "{{region}}"
        instance_type: t2.micro
        vpc_subnet_id: "{{pvtsub1id}}"
        key_name: ansible-key
        image_id: "{{memcache_ami}}"
        wait: true
        wait_timeout: 300
        security_group: "{{appstacksg.group_id}}"
        tags:
          Name: memcache
        exact_count: 1
      register: memcachehost
      when: checkmemcachehost.instances | length == 0

    - name: Create EC2 only if not created rabbitmq
      amazon.aws.ec2_instance_info:
        filters:
          "tag:Name": rabbitmq
          instance-state-name: [ "running" ]
        region: "{{region}}"
      register: checkrabbitmqhost

    - name: Creating EC2 host for rabbitmq
      amazon.aws.ec2_instance:
        name: "rabbitmq"
        region: "{{region}}"
        instance_type: t2.micro
        vpc_subnet_id: "{{pvtsub1id}}"
        key_name: ansible-key
        image_id: "{{rmq_ami}}"
        wait: true
        wait_timeout: 300
        security_group: "{{appstacksg.group_id}}"
        tags:
          Name: rabbitmq
        exact_count: 1
      register: rabbitmqhost
      when: checkrabbitmqhost.instances | length == 0

    - name: Create EC2 only if not created mysql
      amazon.aws.ec2_instance_info:
        filters:
          "tag:Name": mysql
          instance-state-name: [ "running" ]
        region: "{{region}}"
      register: checkmysqlhost

    - name: Creating EC2 host for mysql
      amazon.aws.ec2_instance:
        name: "mysql"
        region: "{{region}}"
        instance_type: t2.micro
        vpc_subnet_id: "{{pvtsub1id}}"
        key_name: ansible-key
        image_id: "{{mysql_ami}}"
        wait: true
        wait_timeout: 300
        security_group: "{{appstacksg.group_id}}"
        tags:
          Name: mysql
        exact_count: 1
      register: mysqlhost
      when: checkmysqlhost.instances | length == 0

    - set_fact:
        nginxip: "{{ nginxhost.instances[0].private_ip_address }}"
        tomcatip: "{{ tomcathost.instances[0].private_ip_address }}"
        memcacheip: "{{ memcachehost.instances[0].private_ip_address }}"
        rabbitmqip: "{{ rabbitmqhost.instances[0].private_ip_address }}"
        mysqlip: "{{ mysqlhost.instances[0].private_ip_address }}"

    - name: Insert private IP address in a file stack/group_vars/hostip
      blockinfile:
        path: stack/group_vars/hostip
        block: |
          nginx_ip:  {{ nginxhost.instances[0].private_ip_address }}
          tomca_ip: {{ tomcathost.instances[0].private_ip_address }}
          memcache_ip: {{ memcachehost.instances[0].private_ip_address }}
          rabbitmq_ip: {{ rabbitmqhost.instances[0].private_ip_address }}
          mysql_ip: {{ mysqlhost.instances[0].private_ip_address }}
          
    - name: Copy login key to stack directory
      copy:
        src: ansible-key.pem
        dest: stack/ansible-stack.pem
        mode: 0400

    - name: Create a loadbalancer
      local_action:
        module: ec2_elb_lb
        name: "app-elb"
        region: "{{region}}"
        state: "{{state}}"
        instance_ids:
          - "{{ nginxhost.instances[0].instance_id }}"
        purge_instance_ids: true #will remove any instances that are added to elb but not specified here in code
        security_group_ids: "{{loadbalancer.group_id}}"
        subnets:
          - "{{pubsub1id}}"
          - "{{pubsub2id}}"
          - "{{pubsub3id}}"
        listeners:
          - protocol: http
            load_balancer_port: 80
            instance_port: 80

    - name: Insert private IP address in a file stack/inventory
      blockinfile:
        path: stack/inventory
        block: |
          web01 ansible_host={{ nginxhost.instances[0].private_ip_address }}
          app01 ansible_host={{ tomcathost.instances[0].private_ip_address }}
          rmq01 ansible_host={{ memcachehost.instances[0].private_ip_address }}
          mc01 ansible_host={{ rabbitmqhost.instances[0].private_ip_address }}
          db01 ansible_host={{ mysqlhost.instances[0].private_ip_address }}
          cntl ansible_host=127.0.0.1 ansible_connection=local
          
          [webservers]
          web01
          
          [appservers]
          app01
          
          [rmqserver]
          rmq01
          
          [mcserver]
          mc01
          
          [database]
          db01
          
          [control]
          cntl
          
          [stack_inst:children]
          webservers
          appservers
          rmqserver
          mcserver
          database
          
          [stack_inst:vars]
          ansible_user=ubuntu
          ansible_ssh_private_key_file=ansible-key.pem
          #ansible_python_interpreter=/usr/bin/python3

